# Generated by Django 5.2.3 on 2025-06-17 23:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='badge',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('badge_name', models.CharField(max_length=50)),
                ('badge_backgroud', models.TextField()),
                ('badge_text_color', models.CharField(max_length=7)),
                ('additional_css', models.TextField(blank=True, null=True)),
                ('self_asign', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MBTAdminPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'MBT Admin Permission',
                'verbose_name_plural': 'MBT Admin Permissions',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('join_date', models.DateTimeField(auto_now_add=True)),
                ('theme_id', models.IntegerField(default=1)),
                ('ticketer_code', models.CharField(blank=True, max_length=50, null=True)),
                ('static_ticketer_code', models.BooleanField(default=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('banned', models.BooleanField(default=False)),
                ('banned_date', models.DateTimeField(blank=True, null=True)),
                ('banned_reason', models.TextField(blank=True, null=True)),
                ('total_user_reports', models.PositiveIntegerField(default=0)),
                ('ad_free_until', models.DateTimeField(blank=True, null=True)),
                ('pfp', models.ImageField(blank=True, default='default_profile_pic.png', null=True, upload_to='profile_pics/')),
                ('banner', models.ImageField(blank=True, default='default_banner.png', null=True, upload_to='profile_banners/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('badges', models.ManyToManyField(blank=True, related_name='badges', to='main.badge')),
                ('mbt_admin_perms', models.ManyToManyField(blank=True, help_text='Administrative permissions for MyBusTimes', related_name='users_with_perm', to='main.mbtadminpermission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
