# Generated by Django 5.2.3 on 2025-07-06 23:30

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad_name', models.CharField(max_length=100)),
                ('ad_img', models.ImageField(upload_to='images/')),
                ('ad_link', models.TextField()),
                ('ad_live', models.BooleanField(default=False)),
                ('ad_img_overide', models.URLField(blank=True, help_text='Override image URL for the ad', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='badge',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('badge_name', models.CharField(max_length=50)),
                ('badge_backgroud', models.TextField()),
                ('badge_text_color', models.CharField(max_length=7)),
                ('additional_css', models.TextField(blank=True, null=True)),
                ('self_asign', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='featureToggle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('enabled', models.BooleanField(default=True)),
                ('maintenance', models.BooleanField(default=False)),
                ('super_user_only', models.BooleanField(default=False, help_text='Only superusers can access this feature')),
                ('coming_soon', models.BooleanField(default=False)),
                ('coming_soon_percent', models.IntegerField(blank=True, default=0, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='google_ad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad_type', models.CharField(choices=[('article', 'Article'), ('banner', 'Banner')], max_length=50)),
                ('ad_id', models.CharField(help_text='Google Ad ID (e.g., 6635106786)', max_length=100)),
                ('ad_place_id', models.CharField(help_text='MBT AD Box ID (e.g., body-ad-1)', max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MBTAdminPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'MBT Admin Permission',
                'verbose_name_plural': 'MBT Admin Permissions',
            },
        ),
        migrations.CreateModel(
            name='region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.CharField(max_length=100, unique=True)),
                ('region_code', models.CharField(max_length=3, unique=True)),
                ('region_country', models.CharField(default='England', max_length=100)),
                ('in_the', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='siteUpdate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('live', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='theme',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('theme_name', models.CharField(blank=True, max_length=50, null=True)),
                ('css', models.FileField(help_text='Upload a CSS file. <a href="/static/themes/templateTheme.css" target="_blank">Download template</a>', upload_to='themes/')),
                ('main_colour', models.CharField(blank=True, max_length=50)),
                ('dark_theme', models.BooleanField(default=False)),
                ('weight', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('join_date', models.DateTimeField(auto_now_add=True)),
                ('ticketer_code', models.CharField(blank=True, max_length=50, null=True)),
                ('static_ticketer_code', models.BooleanField(default=True)),
                ('reg_background', models.BooleanField(default=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('last_active', models.DateTimeField(blank=True, null=True)),
                ('banned', models.BooleanField(default=False)),
                ('banned_date', models.DateTimeField(blank=True, null=True)),
                ('banned_reason', models.TextField(blank=True, null=True)),
                ('total_user_reports', models.PositiveIntegerField(default=0)),
                ('ad_free_until', models.DateTimeField(blank=True, null=True)),
                ('pfp', models.ImageField(blank=True, default='images/default_profile_pic.png', null=True, upload_to='images/profile_pics/')),
                ('banner', models.ImageField(blank=True, default='images/default_banner.png', null=True, upload_to='images/profile_banners/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('badges', models.ManyToManyField(blank=True, related_name='badges', to='main.badge')),
                ('mbt_admin_perms', models.ManyToManyField(blank=True, help_text='Administrative permissions for MyBusTimes', related_name='users_with_perm', to='main.mbtadminpermission')),
                ('theme', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.theme')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BannedIps',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(unique=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('banned_at', models.DateTimeField(auto_now_add=True)),
                ('related_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='banned_ips', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('report_type', models.CharField(choices=[('Bug', 'Bug'), ('User', 'User')], max_length=10)),
                ('details', models.TextField(help_text='Describe what happened')),
                ('context', models.TextField(blank=True, help_text='Add any links, vehicle IDs, or extra context')),
                ('screenshot', models.ImageField(blank=True, null=True, upload_to='reports/screenshots/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports_made', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='update',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=50)),
                ('body', models.TextField()),
                ('tages', models.TextField()),
                ('link', models.TextField(blank=True, null=True)),
                ('readBy', models.ManyToManyField(blank=True, related_name='read_updates', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
