<h1>Feature Toggle Status</h1>
<div class="features">
  <% 
  // Group the features based on removing the first part of the name
  const groupedFeatures = {};
  
  for (const [feature, { enabled, maintenance, coming_soon, coming_soon_percent }] of Object.entries(featureToggles)) {
    const groupName = feature.split(' ').slice(1).join(' ');
    if (!groupedFeatures[groupName]) {
      groupedFeatures[groupName] = [];
    }
    groupedFeatures[groupName].push([feature, { enabled, maintenance, coming_soon, coming_soon_percent }]);
  }

  // Sort the groups alphabetically
  const sortedGroupedFeatures = Object.keys(groupedFeatures).sort().reduce((acc, key) => {
    acc[key] = groupedFeatures[key];
    return acc;
  }, {});
%>

  <% // Loop through the sorted groups and display them
  for (const [groupName, features] of Object.entries(sortedGroupedFeatures)) { %>
  <h3><%= groupName.charAt(0).toUpperCase() + groupName.slice(1) %> Features</h3>
  <table>
    <thead>
      <tr>
        <th>Feature Name</th>
        <th>Status</th>
      </tr>
    </thead>
    <tbody>
      <% features.forEach(([feature, { enabled, maintenance, coming_soon, coming_soon_percent }]) => { %>
      <tr>
        <td><%= feature %></td>
        <td class="<%= (coming_soon ? 'coming_soon ' : (maintenance ? 'maintenance ' : (enabled ? 'enabled' : 'disabled')))%>" style="<%= (coming_soon ? `background-image: linear-gradient(90deg, #7f28a7 ${coming_soon_percent}%, transparent ${coming_soon_percent}.05%), linear-gradient(90deg, #0000006e ${coming_soon_percent}%, transparent ${coming_soon_percent + 1}.05%);` : '') %>"">
          <span class="status-label">
            <% if (coming_soon) { %>Coming Soon <% if (coming_soon_percent > 0) { %> <%= coming_soon_percent %>%<% } %><% } else if (maintenance) { %>Maintenance<% } else { %><%= enabled ? 'Enabled' : 'Disabled' %><% } %>
          </span>
        </td>
      </tr>
      <% }) %>
    </tbody>
  </table>
  <% } %>
</div>