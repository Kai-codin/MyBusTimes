<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link rel="stylesheet" href="/styles.css">
    <script src="https://d3js.org/d3.v7.min.js"></script> <!-- Use D3.js for rendering the map -->
</head>
<body>

    <header>
        <nav>
            <ul>
                <% breadcrumbs.forEach(function(breadcrumb) { %>
                    <li><a href="<%= breadcrumb.url %>" class="<%= breadcrumb.className %>"><%= breadcrumb.name %></a></li>
                <% }); %>
            </ul>
        </nav>
    </header>

    <h1><%= title %></h1>

    <!-- Container for the tube-style map -->
    <div id="map-container">
        <svg id="network-map" width="100%" height="600px"></svg>
    </div>

    <script>
        // Basic data for routes and destinations
        const routes = <%- JSON.stringify(routes) %>;
        const destinations = <%- JSON.stringify(destinations) %>;

        // Create a basic map with circles for stations and lines for routes
        const svg = d3.select("#network-map");
        const width = svg.node().getBoundingClientRect().width;
        const height = svg.node().getBoundingClientRect().height;

        // Define a simple scale for positioning
        const xScale = d3.scaleLinear().domain([0, 10]).range([0, width]);
        const yScale = d3.scaleLinear().domain([0, 10]).range([0, height]);

        // Draw the stations (destinations)
        svg.selectAll(".station")
            .data(destinations)
            .enter()
            .append("circle")
            .attr("class", "station")
            .attr("cx", (d, i) => xScale(i % 10))  // Random positions for demo
            .attr("cy", (d, i) => yScale(Math.floor(i / 10)))
            .attr("r", 5)
            .style("fill", "blue")
            .style("stroke", "white")
            .style("stroke-width", 2);

        // Draw the routes (lines between stations)
        routes.forEach(route => {
            svg.append("path")
                .datum(route.stops)  // Assuming each route has a list of stops
                .attr("class", "route")
                .attr("d", d3.line()
                    .x((d, i) => xScale(i % 10))  // Just for demo, real data might need better handling
                    .y((d, i) => yScale(Math.floor(i / 10)))
                )
                .style("stroke", "black")
                .style("stroke-width", 2)
                .style("fill", "none");
        });
    </script>
</body>
</html>
